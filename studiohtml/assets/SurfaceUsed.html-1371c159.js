import{_ as e,p as a,q as r,a1 as i}from"./framework-204010b2.js";const p={},d=i('<h1 id="表面-gui" tabindex="-1"><a class="header-anchor" href="#表面-gui" aria-hidden="true">#</a> 表面 Gui</h1><p>在 <code>界面 Gui</code> 指南中，你学习了如何将 <code>GUI</code> 放置于屏幕“画布”并向游戏玩家显示。但 <code>GUI</code> 不仅局限于屏幕。使用表面 <code>GUI</code>，你可以将界面直接添加至游戏世界，从而创建商店招牌、锁门用键盘面板，甚至是触摸屏。</p><h2 id="创建基本表面-gui" tabindex="-1"><a class="header-anchor" href="#创建基本表面-gui" aria-hidden="true">#</a> 创建基本表面 GUI</h2><p>在第一个示例中，我们将探索如何为非交互式表面对象（如招牌或绘画）设置表面 GUI。</p><h4 id="_1-创建招牌" tabindex="-1"><a class="header-anchor" href="#_1-创建招牌" aria-hidden="true">#</a> 1. 创建招牌</h4><p>在创建表面 GUI 前，你需要一个用于与之相连的基本区块。该区块的大小与我们即将创建的表面 GUI 大小匹配。</p><p>创建正好为 8 格长 (X)、4 格高 (Y) 的宽薄部件。</p><p>对于本演示，请务必将区块设置为 8 格长、4 格高（稍后将详细说明）。要检查和准确设置尺寸，请查看 Properties（属性）窗口，并展开 Part（部件） → Size（尺寸）树。 重命名 SignBoard 部件。</p><h4 id="_2-创建表面-gui" tabindex="-1"><a class="header-anchor" href="#_2-创建表面-gui" aria-hidden="true">#</a> 2. 创建表面 GUI</h4><p>现在，我们来创建表面 GUI，并将其作为招牌部件的直接子元素。</p><p>在“Explorer（管理器）”窗口中，将鼠标悬停于 SignBoard 对象上，然后单击圆圈 ⊕ 按钮。</p><p>从下拉菜单中选择 SurfaceGui。此操作将在部件前侧表面创建空白的表面 GUI 空间。</p><h4 id="_3-添加文本标签" tabindex="-1"><a class="header-anchor" href="#_3-添加文本标签" aria-hidden="true">#</a> 3. 添加文本标签</h4><p>正如在屏幕上创建新的 ScreenGui 空间一样，新的 SurfaceGui 一开始是一块空白画布，横跨部件的完整表面（前侧、顶部、后侧、左侧等）。</p><p>你可以将很多元素添加至表面 GUI，但我们先从基本的文本标签开始。在“Explorer（管理器）”窗口中，找到 SurfaceGui 对象并插入 TextLabel。</p><p>此操作可将纯文本标签添加至部件的前侧表面。</p><p>视镜头视图而定，你看到的可能是部件后侧表面，而不是 GUI 所在的前侧表面。如果看不到标签，请将镜头移至另一侧。</p><h4 id="_4-设置画布尺寸" tabindex="-1"><a class="header-anchor" href="#_4-设置画布尺寸" aria-hidden="true">#</a> 4. 设置画布尺寸</h4><p>如前所述，表面 GUI 占据部件的一个完整表面。在本示例中，它位于部件的前侧表面，这是所有新表面 GUI 的默认位置。</p><p>视 GUI 所处的部件表面位置而定，设置相同比例的画布尺寸是一种明智的做法。由于部件为 8 格长、4 格高，因此前侧表面（黄色框）同样为 8 格长、4 格高。</p><p>作为良好的开端，你可以将画布宽度和高度设置为各方向表面格长度的 100 倍。</p><p>在“Explorer（管理器）”窗口中，确保 SurfaceGui 对象仍为选中状态。</p><p>在“Properties（属性）”窗口中，展开 CanvasSize 值。</p><p>由于表面为 4 格高，因此请将 Y 值更改为 400（由于表面为 8 格长，因此可将 X 值保持为 800）。</p><p>很好！尽管文本标签的外观不会存在较大差异，但根据表面尺寸设置相应比例的画布尺寸，有助于你在设计 GUI 时获取一致的空间。</p><h4 id="_5-自定义标签" tabindex="-1"><a class="header-anchor" href="#_5-自定义标签" aria-hidden="true">#</a> 5. 自定义标签</h4><p>现在，我们来更改文本标签属性，使文本标签居中显示并填充大部分前侧表面。如需查看文本标签属性，请参阅 Intro to GUIs 指南。</p><p>单击管理器中的文本标签（如果尚未选中）。 在“Properties（属性）”窗口中找到 AnchorPoint 属性。将 X 和 Y 都设置为 0.5，以便将锚点居中显示。</p><p>将 BackgroundColor3 更改为你喜欢的颜色。 4.将 BorderSizePixel 设置为 0，以移除标签边框。 对于 Position，请将 X → Scale 和 Y → Scale 都设置为 0.5。此操作可将标签居中显示于表面 GUI 的边界内。</p><p>在 Size 部分，将 X → Offset 设置为 750，并将 Y → Offset 设置为 350。由于你已将画布尺寸设置为 800×400 (X×Y)，因此文本标签现在几乎占据整个画布。</p><p>现在，你可以发挥创意，设置标签的其他文本属性。例如，更改 Font、Text、TextColor3、TextSize、TextWrapped 和其他属性，从而制作出真正的专业招牌！</p><h2 id="光线影响" tabindex="-1"><a class="header-anchor" href="#光线影响" aria-hidden="true">#</a> 光线影响</h2><p>通常情况下，GUI 空间与其所在表面共享相同的光线量 — 如果表面处于黑暗中或被阴影覆盖，则置于 GUI 中的文本或图像也将处于黑暗中。</p><p>要更改 GUI 受其表面光线影响的程度，请调整 LightInfluence 属性。正常值为 1，表示 GUI 空间将像周围的环境一样被点亮。如果将其设置为 0，则内部图像的亮度（或暗度）将根据设计而定。如果你想创建类似霓虹灯的物体，即使在黑暗的环境中也会发光，则此设置非常实用。</p>',34),h=[d];function t(c,o){return a(),r("div",null,h)}const s=e(p,[["render",t],["__file","SurfaceUsed.html.vue"]]);export{s as default};
