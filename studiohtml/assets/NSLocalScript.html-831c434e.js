import{_ as c}from"./localscript_used-843cc839.js";import{_ as l,M as i,p as r,q as d,Q as p,R as n,t as a,N as s,V as o,a1 as t}from"./framework-204010b2.js";const u={},h=n("h1",{id:"本地脚本-localscript",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#本地脚本-localscript","aria-hidden":"true"},"#"),a(" 本地脚本 - LocalScript")],-1),_=n("h2",{id:"官方定义",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#官方定义","aria-hidden":"true"},"#"),a(" 官方定义")],-1),k=t('<p><code>LocalScript</code> 是用于在连接到 <code>MiniStudio</code> 服务器的客户端上运行 <code>Lua</code> 代码的 <code>Lua</code> 源容器。它们用于访问仅限客户端的对象，如玩家的 <code>Camera</code>。对于通过 <code>LocalScript</code> 运行的代码，<code>Players</code> 服务的 <code>LocalPlayer</code> 属性将返回客户端正在运行脚本的玩家。</p><p>仅当 <code>Lua</code> 代码是以下某个对象的子类时，<code>LocalScript</code> 才会运行该代码：</p><p><img src="'+c+'" alt="localscript_used"></p>',3),v=n("strong",null,"Player",-1),m=n("strong",null,"Player",-1),f=n("strong",null,"Player",-1),b=n("code",null,"LocalPlayer",-1),g=n("code",null,"Actor",-1),y=n("code",null,"LocalScript",-1),x=n("code",null,"LocalPlayer",-1),S=n("code",null,"Actor",-1),L=n("code",null,"LocalScript",-1),P=n("strong",null,"Player",-1),q=n("strong",null,"Player",-1),C=t(`<h2 id="自己的理解" tabindex="-1"><a class="header-anchor" href="#自己的理解" aria-hidden="true">#</a> 自己的理解</h2><p>当你想对本地（即客户端）对象操作时，通常都会用到 <code>LocalScript</code>.</p><p>常用的情况：</p><h6 id="_1-改变摄像机的相关属性" tabindex="-1"><a class="header-anchor" href="#_1-改变摄像机的相关属性" aria-hidden="true">#</a> 1. 改变摄像机的相关属性</h6><h6 id="_2-获取本地玩家对象-localplayer" tabindex="-1"><a class="header-anchor" href="#_2-获取本地玩家对象-localplayer" aria-hidden="true">#</a> 2. 获取本地玩家对象: LocalPlayer</h6><h6 id="_3-获取用户输入" tabindex="-1"><a class="header-anchor" href="#_3-获取用户输入" aria-hidden="true">#</a> 3. 获取用户输入</h6><h6 id="_4-改变-gui" tabindex="-1"><a class="header-anchor" href="#_4-改变-gui" aria-hidden="true">#</a> 4. 改变 Gui</h6><blockquote><p>通常，在 <code>LocalScript</code> 里做出的修改，比如修改某个物体的颜色大小等，只会在该客户端有效，其它玩家看到的该物体还是之前的样子。但是对玩家人物的修改（比如修改玩家的移动速度，弹跳力等）如果想要同步到服务器，则应该放到服务器脚本中，这样所有人都可以看到修改后的效果。</p></blockquote><h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例" aria-hidden="true">#</a> 代码示例</h2><h6 id="_1、打印当前照相机的位置" tabindex="-1"><a class="header-anchor" href="#_1、打印当前照相机的位置" aria-hidden="true">#</a> 1、打印当前照相机的位置</h6><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">print</span><span class="token punctuation">(</span>game<span class="token punctuation">:</span><span class="token function">GetService</span><span class="token punctuation">(</span><span class="token string">&quot;WorkSpace&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>CurrentCamera<span class="token punctuation">.</span>Position<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="_2、改变当前玩家的移动速度" tabindex="-1"><a class="header-anchor" href="#_2、改变当前玩家的移动速度" aria-hidden="true">#</a> 2、改变当前玩家的移动速度</h6><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> player <span class="token operator">=</span> game<span class="token punctuation">:</span><span class="token function">GetService</span><span class="token punctuation">(</span><span class="token string">&quot;Players&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>LocalPlayer
<span class="token keyword">local</span> character <span class="token operator">=</span> player<span class="token punctuation">.</span>Character
character<span class="token punctuation">.</span>Movespeed <span class="token operator">=</span> <span class="token number">30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3、获取用户输入-用户按下j键-打印hello" tabindex="-1"><a class="header-anchor" href="#_3、获取用户输入-用户按下j键-打印hello" aria-hidden="true">#</a> 3、获取用户输入，用户按下J键，打印Hello</h6><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> contextActionService <span class="token operator">=</span> game<span class="token punctuation">:</span><span class="token function">GetService</span><span class="token punctuation">(</span><span class="token string">&quot;ContextActionService&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">PrintHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>
contextActionService<span class="token punctuation">:</span><span class="token function">BindAction</span><span class="token punctuation">(</span><span class="token string">&quot;printHello&quot;</span><span class="token punctuation">,</span> PrintHello<span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">,</span> Enum<span class="token punctuation">.</span>KeyCode<span class="token punctuation">.</span>J
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15);function A(N,w){const e=i("font");return r(),d("div",null,[h,_,p(" 官方API "),k,n("ul",null,[n("li",null,[v,a(" 的 "),s(e,{color:"red"},{default:o(()=>[a("Backpack")]),_:1}),a("，如 "),s(e,{color:"red"},{default:o(()=>[a("Tool")]),_:1}),a(" 的子项")]),n("li",null,[m,a(" 的 "),s(e,{color:"red"},{default:o(()=>[a("character")]),_:1}),a(" 模型")]),n("li",null,[f,a(" 的 "),s(e,{color:"red"},{default:o(()=>[a("Actor")]),_:1}),a(" ，联机情况下只有 "),b,a(" 对应的 "),g,a(" 对象的 "),y,a(" 才会运行，非 "),x,a(" 的 "),S,a(" 即使有 "),L,a(" 也不会执行")]),n("li",null,[P,a(" 的 "),s(e,{color:"red"},{default:o(()=>[a("PlayerGui")]),_:1})]),n("li",null,[q,a(" 的 "),s(e,{color:"red"},{default:o(()=>[a("PlayerScripts")]),_:1})]),n("li",null,[s(e,{color:"red"},{default:o(()=>[a("LocalFirst")]),_:1}),a(" 服务")])]),C])}const G=l(u,[["render",A],["__file","NSLocalScript.html.vue"]]);export{G as default};
