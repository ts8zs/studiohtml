import{_ as a,p as n,q as s,a1 as e}from"./framework-204010b2.js";const t={},o=e(`<h1 id="lua脚本的基本使用" tabindex="-1"><a class="header-anchor" href="#lua脚本的基本使用" aria-hidden="true">#</a> Lua脚本的基本使用</h1><h3 id="_1、定义变量" tabindex="-1"><a class="header-anchor" href="#_1、定义变量" aria-hidden="true">#</a> 1、定义变量</h3><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> x <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2、获取游戏场景中的某个对象" tabindex="-1"><a class="header-anchor" href="#_2、获取游戏场景中的某个对象" aria-hidden="true">#</a> 2、获取游戏场景中的某个对象</h3><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> part <span class="token operator">=</span> workspace<span class="token punctuation">.</span>Part 
<span class="token keyword">local</span> part <span class="token operator">=</span> game<span class="token punctuation">.</span>Workspace<span class="token punctuation">.</span>Part <span class="token comment">-- 这两个方式是一样的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、定义函数-调用函数" tabindex="-1"><a class="header-anchor" href="#_3、定义函数-调用函数" aria-hidden="true">#</a> 3、定义函数 &amp; 调用函数</h3><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>
	<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!Arg = &quot;</span><span class="token operator">..</span>arg<span class="token punctuation">)</span> <span class="token comment">-- 打印到输出界面 ..可以合并字符串</span>
<span class="token keyword">end</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、获取ministudio服务" tabindex="-1"><a class="header-anchor" href="#_4、获取ministudio服务" aria-hidden="true">#</a> 4、获取<code>MiniStudio</code>服务</h3><p>在<code>MiniStudio</code>开发中，我们会需要用到不同的<code>MiniStudio</code>提供的服务(<code>Service</code>)，从而用它们来实现游戏开发中的不同功能。获取服务的方式很简单，调用<code>game:GetService</code>(服务名称)即可。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> Players <span class="token operator">=</span> game<span class="token punctuation">:</span><span class="token function">GetService</span><span class="token punctuation">(</span><span class="token string">&quot;Players&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">local</span> TweenService <span class="token operator">=</span> game<span class="token punctuation">:</span><span class="token function">GetService</span><span class="token punctuation">(</span><span class="token string">&quot;TweenService&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、使用ministudio服务-for循环-遍历table类型数据-这里的table-allplayers-是用来储存所有玩家对象" tabindex="-1"><a class="header-anchor" href="#_5、使用ministudio服务-for循环-遍历table类型数据-这里的table-allplayers-是用来储存所有玩家对象" aria-hidden="true">#</a> 5、使用<code>MiniStudio</code>服务 <code>for</code>循环 遍历<code>table</code>类型数据(这里的<code>table(allPlayers</code>)是用来储存所有玩家对象)</h3><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> allPlayers <span class="token operator">=</span> Players<span class="token punctuation">:</span><span class="token function">GetPlayers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> _<span class="token punctuation">,</span>i <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>allPlayers<span class="token punctuation">)</span> <span class="token keyword">do</span>
	<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;玩家名称为: &quot;</span><span class="token operator">..</span>i<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),c=[o];function l(i,p){return n(),s("div",null,c)}const r=a(t,[["render",l],["__file","ScriptUsed.html.vue"]]);export{r as default};
