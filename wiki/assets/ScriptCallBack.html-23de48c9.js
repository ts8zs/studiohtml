import{_ as o,M as t,p as c,q as p,R as n,t as s,N as i,V as l,a1 as a}from"./framework-5866ffd3.js";const u={},d=n("h1",{id:"使用回调",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用回调","aria-hidden":"true"},"#"),s(" 使用回调")],-1),r=n("p",null,[s("回调（"),n("code",null,"Callback"),s("）是设置为函数对象的只写成员。开发者无法直接调用回调，而是需要 "),n("code",null,"MiniStudio"),s(" 对回调函数进行内部触发，并向其传递回调处理程序或函数所需的相关信息。")],-1),k=n("h2",{id:"常用重要回调",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#常用重要回调","aria-hidden":"true"},"#"),s(" 常用重要回调")],-1),v=n("strong",null,"Close：",-1),m=a("<li><strong>RemoteFunction.OnClientInvoke：</strong> 当服务器调用 <code>RemoteFunction:FireClient(player, …)</code> 或 <code>RemoteFunction:FireAllClients(…)</code> 时被调用。</li><li><strong>RemoteFunction.OnServerInvoke：</strong> 当客户端调用 <code>RemoteFunction:InvokeServer(…)</code> 时被调用。</li><li><strong>BindableFunction.OnInvoke：</strong> 当脚本调用 <code>BindableFunction:Invoke(…)</code> 时被调用。</li>",3),b=a(`<h2 id="回调用法" tabindex="-1"><a class="header-anchor" href="#回调用法" aria-hidden="true">#</a> 回调用法</h2><p>在设置回调时，开发者需要将其分配给指定函数：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> CustomNotify <span class="token operator">=</span> SandboxNode<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;CustomNotify&quot;</span><span class="token punctuation">)</span>

<span class="token comment">--监听事件</span>
CustomNotify<span class="token punctuation">.</span>Notify<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;TestNotify-&gt;&quot;</span><span class="token operator">..</span>v1<span class="token operator">..</span><span class="token string">&quot; &quot;</span><span class="token operator">..</span>v2<span class="token punctuation">)</span>
        <span class="token comment">--TestNotify-&gt;100 hello</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于回调拥有只写属性，开发者将无法获取回调的值。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> CustomNotify <span class="token operator">=</span> SandboxNode<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;CustomNotify&quot;</span><span class="token punctuation">)</span>

<span class="token comment">--监听事件</span>
CustomNotify<span class="token punctuation">.</span>Notify<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;TestNotify-&gt;&quot;</span><span class="token operator">..</span>v1<span class="token operator">..</span><span class="token string">&quot; &quot;</span><span class="token operator">..</span>v2<span class="token punctuation">)</span>
        <span class="token comment">--TestNotify-&gt;100 hello</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>

<span class="token comment">--发送自定义事件</span>
CustomNotify<span class="token punctuation">:</span><span class="token function">Fire</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="回调示例" tabindex="-1"><a class="header-anchor" href="#回调示例" aria-hidden="true">#</a> 回调示例</h2><p>在本示例中，我们将会创建一个 <code>CustomNotify</code>，并将其绑定至接收创建矩形 <code>LocalPosition</code> 和 <code>GeoSolidShape</code> 的函数。此 <code>CustomNotify</code> 将会创建部件并将其放入 <code>Workspace</code>（工作区），并将传递给接收函数的部件名称与尺寸应用至新创建的部件。</p><p>首先，让我们来创建 <code>BindableFunction</code>：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> CustomNotify <span class="token operator">=</span> SandboxNode<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;CustomNotify&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后使用 <code>OnInvoke</code> 回调将其与函数相连：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>CustomNotify<span class="token punctuation">.</span>Notify<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>LocalPos<span class="token punctuation">,</span> GeoSolidShape<span class="token punctuation">)</span>
  <span class="token keyword">local</span> cube <span class="token operator">=</span> SandboxNode<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;GeoSolid&quot;</span><span class="token punctuation">)</span>
  cube<span class="token punctuation">.</span>LocalPosition <span class="token operator">=</span> LocalPos
  cube<span class="token punctuation">.</span>GeoSolidShape <span class="token operator">=</span> GeoSolidShape
  cube<span class="token punctuation">.</span>Parent <span class="token operator">=</span> game<span class="token punctuation">.</span>WorkSpace
<span class="token keyword">end</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置完毕后，开发者将可以按照下列方式调用 <code>BindableFunction</code>，并使用其创建新的部件：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>CustomNotify<span class="token punctuation">:</span><span class="token function">Fire</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Enum<span class="token punctuation">.</span>GeoSolidShape<span class="token punctuation">.</span>Cuboid<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,13);function f(h,g){const e=t("font");return c(),p("div",null,[d,r,k,n("ul",null,[n("li",null,[v,s(" 在游戏关闭之前触发，以便为脚本提供保存数据的机会。"),i(e,{color:"red"},{default:l(()=>[s("（敬请期待）")]),_:1})]),m]),b])}const N=o(u,[["render",f],["__file","ScriptCallBack.html.vue"]]);export{N as default};
