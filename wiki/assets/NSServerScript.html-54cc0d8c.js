import{_ as c,M as l,p as r,q as i,Q as o,N as e,V as t,t as n,R as a,a1 as p}from"./framework-5866ffd3.js";const d={},u=a("h1",{id:"服务器脚本-serverscript",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#服务器脚本-serverscript","aria-hidden":"true"},"#"),n(" 服务器脚本 - ServerScript")],-1),_=a("h2",{id:"官方定义",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#官方定义","aria-hidden":"true"},"#"),n(" 官方定义")],-1),h=a("code",null,"Lua",-1),k=a("code",null,'print("Hello, world")',-1),v=a("code",null,"Lua",-1),S=a("li",null,[a("code",null,"Disabled"),n(" 属性为 "),a("code",null,"false")],-1),f=a("code",null,"Workspace",-1),m=a("code",null,"ServerScriptService",-1),b=a("h2",{id:"自己的理解",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#自己的理解","aria-hidden":"true"},"#"),n(" 自己的理解")],-1),y=a("code",null,"LocalScript",-1),x=a("code",null,"Part",-1),g=a("code",null,"A",-1),P=a("code",null,"LocalScript",-1),w=a("code",null,"A",-1),N=a("code",null,"A",-1),q=a("code",null,"LocalScript",-1),L=a("code",null,"API",-1),V=a("code",null,"HTTP",-1),A=p(`<h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例" aria-hidden="true">#</a> 代码示例</h2><h6 id="_1、获取服务器所有玩家对象-并修改他们的移动速度" tabindex="-1"><a class="header-anchor" href="#_1、获取服务器所有玩家对象-并修改他们的移动速度" aria-hidden="true">#</a> 1、获取服务器所有玩家对象，并修改他们的移动速度</h6><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> players <span class="token operator">=</span> game<span class="token punctuation">:</span><span class="token function">GetService</span><span class="token punctuation">(</span><span class="token string">&quot;Players&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">local</span> allPlayers <span class="token operator">=</span> players<span class="token punctuation">:</span><span class="token function">GetPlayers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> _<span class="token punctuation">,</span>i <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>allPlayers<span class="token punctuation">)</span> <span class="token keyword">do</span>
    <span class="token keyword">local</span> character <span class="token operator">=</span> i<span class="token punctuation">.</span>Character
    character<span class="token punctuation">.</span>Movespeed <span class="token operator">=</span> <span class="token number">100</span>
	<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;玩家名称为: &quot;</span><span class="token operator">..</span>i<span class="token punctuation">.</span>Name<span class="token operator">..</span><span class="token string">&quot;的移动速度修改为100&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function B(C,I){const s=l("font");return r(),i("div",null,[u,_,o(" 官方API "),e(s,{color:"red"},{default:t(()=>[n("Script")]),_:1}),n("（脚本）是一种 "),h,n(" 代码容器，它的内容可以在服务器上运行。默认情况下，脚本中会包含 "),k,n(" 内容。若符合以下条件，脚本中的 "),v,n(" 代码会在一个新线程中运行："),a("ul",null,[S,a("li",null,[e(s,{color:"red"},{default:t(()=>[n("Script")]),_:1}),n(" 对象是 "),f,n(" 或 "),m,n(" 的子类")])]),e(s,{color:"red"},{default:t(()=>[n("Script")]),_:1}),n("会持续运行，直到不再符合以上条件，此时它会终结或产生错误（除非该错误是由关联到某些正在触发的事件的函数所引发）。另外，如果 "),e(s,{color:"red"},{default:t(()=>[n("Script")]),_:1}),n(" 或其父类之一被销毁，线程也会停止。即使 ‘Instance/Parent|Parent’ 属性被设置为 ‘nil’ （但 "),e(s,{color:"red"},{default:t(()=>[n("Script")]),_:1}),n(" 未被销毁），"),e(s,{color:"red"},{default:t(()=>[n("Script")]),_:1}),n(" 仍会继续运行。"),e(s,{color:"red"},{default:t(()=>[n("Script")]),_:1}),n(" 可以访问服务器端对象、属性和事件。 "),o(" 例如，Script 可以使用 ‘BadgeService’ 向玩家奖励勋章，而客户端的 ‘LocalScript’ 则无法实现此操作。由 LocalScript 所采取的动作若不经过复制（根据 ‘Workspace/FilteringEnabled’），则将对 Script 不可见。 "),b,a("p",null,[n("其实 "),e(s,{color:"red"},{default:t(()=>[n("Script")]),_:1}),n(" 很多时候代码逻辑都和 "),y,n(" 很像，比如同样对一个 "),x,n(" 进行属性修改（增加大小，颜色等等），玩家 "),g,n(" 执行 "),P,n(" 的修改操作只能对玩家 "),w,n(" 自己的客户端生效，而执行 "),e(s,{color:"red"},{default:t(()=>[n("Script")]),_:1}),n(" 的修改操作会对包括 "),N,n(" 的所有玩家的客户端生效。")]),a("p",null,[n("但 "),e(s,{color:"red"},{default:t(()=>[n("Script")]),_:1}),n(" 也有很多 "),q,n(" 做不到的事情，比如调用数据库相关 "),L,n(" , 发送 "),V,n(" 请求服务等等。")]),A])}const E=c(d,[["render",B],["__file","NSServerScript.html.vue"]]);export{E as default};
