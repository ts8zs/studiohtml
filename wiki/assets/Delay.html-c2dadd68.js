import{_ as n,p as s,q as a,a1 as e}from"./framework-5866ffd3.js";const t={},p=e(`<h1 id="delay" tabindex="-1"><a class="header-anchor" href="#delay" aria-hidden="true">#</a> Delay</h1><hr><h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述" aria-hidden="true">#</a> 描述</h2><p>函数所属类：<a href="">Timer</a></p><p>首次执行时的延迟的时间，不会在循环间隔（<a href="">Timer.Loop</a>）时都生效，仅表示首次运行时延迟时间</p><hr><h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例" aria-hidden="true">#</a> 代码示例</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> a <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">local</span> timer <span class="token operator">=</span> SandboxNode<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;TimerNode&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- 创建定时器节点</span>
timer<span class="token punctuation">.</span>Delay <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">-- 延迟多少秒开始</span>
timer<span class="token punctuation">.</span>Loop <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token comment">-- 是否循环</span>
timer<span class="token punctuation">.</span>Interval <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">-- 循环间隔多少秒</span>
timer<span class="token punctuation">.</span>Callback <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 回调方法</span>
    a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;timer : &quot;</span><span class="token punctuation">,</span> timer<span class="token punctuation">,</span> <span class="token string">&quot; a=&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">4</span> <span class="token keyword">then</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;timer pause&quot;</span><span class="token punctuation">)</span>
        timer<span class="token punctuation">:</span><span class="token function">Pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 暂停定时器，只有在定时器运行期间有效</span>
        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;timer resume&quot;</span><span class="token punctuation">)</span>
        timer<span class="token punctuation">:</span><span class="token function">Resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 恢复定时器，只有在定时器运行暂停期间有效</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>
timer<span class="token punctuation">:</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">-- 一次性传入参数，并且开始定时器</span>
<span class="token comment">--timer:StartEx(3, true, 3, function() a = a + 1; print(&quot;timer ex : a=&quot;, a) end)</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;timer start&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","Delay.html.vue"]]);export{r as default};
